name: Koupleless Runtime Unit Test
run-name: ${{ github.actor }} pushed code

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

  # enable manually running the workflow
  workflow_dispatch:

env:
  WORK_DIR: .

jobs:
  unit-test-for-jdk8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 8
          cache: maven

      - name: Find Maven modules
        id: find-maven-modules
        run: |
          echo "Finding Maven Modules"
          # 定位 pom.xml 文件，通过 grep 排除掉根目录下的 pom.xml
          modules=$(find . -name pom.xml -maxdepth 2 -not -path "./pom.xml" -exec dirname {} \;)
          echo "$modules"
          # 使用 jq 将 shell 数组转换成 JSON 数组供后续步骤使用
          modules_in_json=$(echo $modules | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "$modules_in_json"
          echo "modules-list=$modules_in_json" >> $GITHUB_OUTPUT

      - name: Print Maven Modules
        run: |
          echo "Print Maven Modules"
          modules=${{ join(fromJSON(steps.find-maven-modules.outputs.modules-list), ' ') }}
          for module in ${modules[@]}; do
            echo "Found Maven Module: ${module}"
          done
        shell: bash

      - name: Determine JDK versions for modules
        id: get-jdk-versions
        run: |
          # 创建一个映射来存储模块名到 JDK 版本的映射
          declare -A jdk_versions
          modules=${{ fromJSON(steps.find-maven-modules.outputs.modules-list) }}
          for module in "${modules[@]}"; do
            # 读取模块中的 pom.xml 来确定 JDK 版本
            jdk_version=$(grep -m 1 '<java.version>' $module/pom.xml | sed 's/<[^>]*>//g' | xargs)
            echo "${module} JDK version: ${jdk_version}"
            # 将模块与其 JDK 版本添加到映射中
            jdk_versions[$module]=$jdk_version
          done
          # 将映射转换为 JSON 并输出
          echo "jdk_versions=$(echo ${jdk_versions[@]} | jq -R 'split(" ") | map({(.): input}) | add')"
          echo "jdk_versions=$(echo ${jdk_versions[@]} | jq -R 'split(" ") | map({(.): input}) | add')" >> $GITHUB_OUTPUT
          echo "modules=$(echo ${modules[@]} | jq -R 'split(" "))'" >> $GITHUB_OUTPUT
          echo "Outputs set."

      - name: Print JDK versions
        run: |
          modules=${{ fromJson(steps.get-jdk-versions.outputs.modules) }}
          jdk_versions=${{ fromJson(steps.get-jdk-versions.outputs.jdk_versions) }}
          for module in "${modules[@]}"; do
             echo "Module: $module, JDK Version: ${jdk_versions[$module]}"
          done

      - name: Install SDKMAN
        run: |
          

      - name: Run tests for each module
        run: |
          modules=${{ fromJson(steps.get-jdk-versions.outputs.modules) }}
          jdk_versions=${{ fromJson(steps.get-jdk-versions.outputs.jdk_versions) }}
          find . -name pom.xml -maxdepth 2 -not -path "./pom.xml" -exec dirname {} \; | xargs -I {} cp HEADER LICENSE Formatter.xml {}
          for module in "${modules[@]}"; do
            jdk_version=${jdk_versions[$module]}
            echo "Running tests for module $module with JDK version $jdk_version"
            # 设置 JDK
            echo "Set up JDK $jdk_version"
            wget https://github.com/AdoptOpenJDK/openjdk${jdk_version}-upstream-binaries/releases/latest/download/OpenJDK${jdk_version}U-jdk_x64_linux_hotspot_*.tar.gz
            tar -xzf OpenJDK${jdk_version}U-jdk_x64_linux_hotspot_*.tar.gz
            export JAVA_HOME=$PWD/jdk-$(ls | grep "jdk" | head -n 1)
            export PATH=$JAVA_HOME/bin:$PATH
            java -version
            # 运行单元测试
            
            mvn clean package test -pl $module -Dmaven.javadoc.skip=true -B -U
            echo "Tests completed for module $module"
          done
        shell: bash
