name: Module Controller Build and Deploy to Aliyun
run-name: ${{ github.actor }} pushed module-controller code

on:
  push:
    branches:
      - master
    paths:
      - 'module-controller/**'
  # enable manually running the workflow
  workflow_dispatch:

env:
  CGO_ENABLED: 0
  GOOS: linux
  WORK_DIR: module-controller
  TAG: ci-test-${{ github.sha }}
  IMAGE_PATH: opensource/test/module-controller
  
defaults:
  run:
    working-directory: module-controller

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Docker login
      uses: docker/login-action@v2.2.0
      with:
       registry: ${{ secrets.DOCKERHUB_REGISTRY }}
       username: ${{ secrets.DOCKERHUB_USERNAME }}
       password: ${{ secrets.DOCKERHUB_PASSWORD }}
       logout: false

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx-${{ github.sha }}

    - name: Set up Docker buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker images
      uses: docker/build-push-action@v4.1.1
      with:
        context: ${{ env.WORK_DIR }}
        cache-from: type=local,src=/tmp/.buildx-cache/${{ runner.os }}-buildx-${{ github.sha }}
        cache-to: type=local,dest=/tmp/.buildx-cache/${{ runner.os }}-buildx-${{ github.sha }}
        file: ${{ env.WORK_DIR }}/Dockerfile
        platforms: linux/amd64
        push: true
        tags: serverless-registry.cn-shanghai.cr.aliyuncs.com/opensource/test/module-controller:${{ env.TAG }}
        
    #- name: Build the Docker image
      #run: docker buildx build --file Dockerfile --platform linux/amd64 -t ${{ secrets.DOCKER_IMAGE_FULL_NAME }}:$TAG .
      
    #- name: Push the Docker image
      #run: docker push ${{ secrets.DOCKER_IMAGE_FULL_NAME }}:$TAG
      
    - name: kubectl-simple
      uses: steebchen/kubectl@v2.1.1
      with:
        config: ${{ secrets.CI_KUBE_CONFIG }}
        command: apply -f ${{ env.WORK_DIR }}/config/samples/module-deployment-controller.yaml
