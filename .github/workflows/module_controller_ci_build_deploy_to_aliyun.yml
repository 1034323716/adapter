name: Module Controller Integration Test
run-name: ${{ github.actor }} pushed module-controller code

on:
  push:
    branches:
      - master
    paths:
      - 'module-controller/**'
      
  pull_request:
    branches:
      - master
    paths:
      - 'module-controller/**'
      
  # enable manually running the workflow
  workflow_dispatch:
  
env:
  CGO_ENABLED: 0
  GOOS: linux
  WORK_DIR: module-controller
  
defaults:
  run:
    working-directory: module-controller

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      - name: Start Minikube
        run: minikube start

      - name: Prepare development env
        run: |
          kubectl apply -f config/crd/bases/serverless.alipay.com_moduledeployments.yaml
          kubectl apply -f config/crd/bases/serverless.alipay.com_modulereplicasets.yaml
          kubectl apply -f config/crd/bases/serverless.alipay.com_modules.yaml
          kubectl apply -f config/crd/bases/serverless.alipay.com_moduletemplates.yaml
          kubectl apply -f config/rbac/role.yaml
          kubectl apply -f config/rbac/role_binding.yaml
          kubectl apply -f config/rbac/service_account.yaml
          kubectl apply -f config/samples/dynamic-stock-deployment.yaml
          kubectl apply -f config/samples/module-deployment-controller.yaml
          kubectl apply -f config/samples/dynamic-stock-service.yaml

      - run: sleep 60

      - name: minikube logs
        run: minikube logs

      - name: get pod
        run: |
          kubectl get pod

      - name: describe pod
        run: |
          kubectl describe pod

      - name: wait base pod available
        run: |
          kubectl wait --for=condition=available deployment/dynamic-stock-deployment --timeout=300s

      - name: get module controller pod available
        run: |
          kubectl wait --for=condition=available deployment/module-controller --timeout=300s

      - name: Apply moduledeployment
        run: |
          kubectl apply -f config/samples/module-deployment_v1alpha1_moduledeployment_provider.yaml

      - name: get moduledeployment
        run: |
          kubectl get moduledeployment
      
      - name: get modulereplicaset
        run: |
          kubectl get modulereplicaset

      - run: sleep 15

      - name: get module
        run: |
          kubectl get module -oyaml

      - name: exist module
        run: |
          moduleCount=$(kubectl get module | wc -l)
          if [[ $moduleCount -lt 1 ]]; then
            echo "ERROR: 不存在module"
            exit 1
          fi

      - name: check module
        run: |
          podname=$(kubectl get pod -l app=dynamic-stock -o name)
          kubectl exec -it $podname -- sh -c 'ls -al'
          kubectl exec -it $podname -- sh -c 'ls -al logs'
          kubectl exec -it $podname -- sh -c 'ls -al logs/stock-mng'
          kubectl exec -it $podname -- sh -c 'ls -al logs/stock-mng/sofa-ark'
          kubectl exec -it $podname -- sh -c 'grep "dynamic-provider:1.0.0 started" logs/stock-mng/sofa-ark/*.log'
          