package com.alipay.sofa.rpc.dubbo3.model;

import java.io.Serializable;

import lombok.Getter;
import lombok.Setter;

/**
 *
 * @author syd
 * @version DemoRequest.java, v 0.1 2023年11月05日 15:17 syd
 */
@Getter
@Setter
public class CommonRequest implements Serializable {
    private static final long serialVersionUID = 3378118426779776009L;
    private String name;
}/*
 * Ant Group
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package com.alipay.sofa.rpc.dubbo3.model;

/**
 *
 * @author syd
 * @version CommonService.java, v 0.1 2023年11月05日 15:17 syd
 */
public interface CommonService {

    CommonResponse sayHello(CommonRequest request);
}/*
 * Ant Group
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package com.alipay.sofa.rpc.dubbo3.model;

import java.io.Serializable;

import lombok.Getter;
import lombok.Setter;

/**
 *
 * @author syd
 * @version DemoResponse.java, v 0.1 2023年11月05日 15:17 syd
 */
@Getter
@Setter
public class CommonResponse implements Serializable {
    private static final long serialVersionUID = -6796302417012125318L;
    private String message;
}<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.alipay.sofa</groupId>
        <artifactId>dubbo3</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.alipay.sofa.rpc.grpc</groupId>
    <artifactId>triplebiz</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>triplebiz</name>

    <dependencies>
		<!--和基座通信-->
		<dependency>
			<groupId>com.alipay.sofa</groupId>
			<artifactId>common-model</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>${protobuf.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-dependencies-zookeeper</artifactId>
            <scope>provided</scope>
            <type>pom</type>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-reload4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.alipay.sofa</groupId>
                <artifactId>sofa-ark-maven-plugin</artifactId>
                <version>${sofa.ark.version}</version>
                <executions>
                    <execution>
                        <id>default-cli</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skipArkExecutable>true</skipArkExecutable>
                    <outputDirectory>./target</outputDirectory>
                    <bizName>triplebiz</bizName>
                    <webContextPath>triplebiz</webContextPath>
                    <declaredMode>true</declaredMode>
                    <!--					打包、安装和发布 ark biz-->
                    <!--					静态合并部署需要配置-->
                    <!--					<attach>true</attach>-->
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
package com.alipay.sofa.rpc.dubbo3.triplebiz;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class Biz1ApplicationTests {

    @Test
    void contextLoads() {
    }

}
<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
    <Appenders>
        <Console name="STDOUT-APPENDER" target="SYSTEM_OUT">
            <PatternLayout pattern="%-5p %c{2} - %m%n%throwable" charset="UTF-8"/>
        </Console>

        <Console name="STDERR-APPENDER" target="SYSTEM_ERR">
            <PatternLayout pattern="%-5p %c{2} - %m%n%throwable" charset="UTF-8"/>
        </Console>

        <RollingFile name="ERROR-APPENDER"
                     fileName="${ctx:logging.file.path}/${ctx:spring.application.name}/common-error.log"
                     filePattern="${ctx:logging.file.path}/${ctx:spring.application.name}/common-error.log.%d{yyyy-MM-dd}"
                     append="true">
            <PatternLayout
                    pattern="%d [%X{traceId} %X{rpcId} - %X{loginUserEmail}/%X{loginUserID}/%X{remoteAddr}/%X{clientId} - %X{requestURIWithQueryString}] %-5p %c{2} - %m%n%throwable"
                    charset="UTF-8"/>
            <TimeBasedTriggeringPolicy/>
            <DefaultRolloverStrategy/>
            <ThresholdFilter level="ERROR"/>
        </RollingFile>

        <RollingFile name="WARN-APPENDER"
                     fileName="${ctx:logging.file.path}/${ctx:spring.application.name}/common-warn.log"
                     filePattern="${ctx:logging.file.path}/${ctx:spring.application.name}/common-warn.log.%d{yyyy-MM-dd}"
                     append="true">
            <PatternLayout
                    pattern="%d [%X{traceId} %X{rpcId} - %X{loginUserEmail}/%X{loginUserID}/%X{remoteAddr}/%X{clientId} - %X{requestURIWithQueryString}] %-5p %c{2} - %m%n%throwable"
                    charset="UTF-8"/>
            <TimeBasedTriggeringPolicy/>
            <DefaultRolloverStrategy/>
            <Filters>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

        <RollingFile name="APP-DEFAULT-APPENDER"
                     fileName="${ctx:logging.file.path}/${ctx:spring.application.name}/app-default.log"
                     filePattern="${ctx:logging.file.path}/${ctx:spring.application.name}/app-default.log.%d{yyyy-MM-dd-HH}"
                     append="true">
            <PatternLayout
                    pattern="%d [%X{traceId} %X{rpcId} - %X{loginUserEmail}/%X{loginUserID}/%X{remoteAddr}/%X{clientId} - %X{requestURIWithQueryString}] %-5p %c{2} - %m%n%throwable"
                    charset="UTF-8"/>
            <TimeBasedTriggeringPolicy/>
            <DefaultRolloverStrategy/>
        </RollingFile>

        <RollingFile name="SPRING-APPENDER" fileName="${ctx:logging.file.path}/spring/spring.log"
                     filePattern="${ctx:logging.file.path}/spring/spring.log.%d{yyyy-MM-dd}"
                     append="true">
            <PatternLayout
                    pattern="%d [%X{traceId} %X{rpcId} - %X{loginUserEmail}/%X{loginUserID}/%X{remoteAddr}/%X{clientId} - %X{requestURIWithQueryString}] %-5p %c{2} - %m%n%throwable"
                    charset="UTF-8"/>
            <TimeBasedTriggeringPolicy/>
            <DefaultRolloverStrategy/>
        </RollingFile>

        <RollingFile name="NO-USAGE-APPENDER" fileName="${ctx:logging.file.path}/no-usage/no-usage.log"
                     filePattern="${ctx:logging.file.path}/no-usage/no-usage.log.%d{yyyy-MM-dd}"
                     append="true">
            <PatternLayout
                    pattern="%d [%X{traceId} %X{rpcId} - %X{loginUserEmail}/%X{loginUserID}/%X{remoteAddr}/%X{clientId} - %X{requestURIWithQueryString}] %-5p %c{2} - %m%n%throwable"
                    charset="UTF-8"/>
            <TimeBasedTriggeringPolicy/>
            <DefaultRolloverStrategy/>
        </RollingFile>
    </Appenders>

    <Loggers>
        <AsyncLogger name="STDOUT" additivity="false" level="info">
            <AppenderRef ref="STDOUT-APPENDER"/>
        </AsyncLogger>

        <AsyncLogger name="STDERR" additivity="false" level="${ctx:logging.level.com.alipay.sofa.rpc.grpc}">
            <AppenderRef ref="STDERR-APPENDER"/>
        </AsyncLogger>

        <AsyncLogger name="com.alipay.sofa.rpc.grpc" additivity="false" level="${ctx:logging.level.com.alipay.sofa.rpc.grpc}">
            <AppenderRef ref="APP-DEFAULT-APPENDER"/>
            <AppenderRef ref="WARN-APPENDER"/>
            <AppenderRef ref="ERROR-APPENDER"/>
            <AppenderRef ref="STDOUT-APPENDER"/>
        </AsyncLogger>

        <AsyncLogger name="org.springframework" additivity="false"
                     level="${ctx:logging.level.com.alipay.sofa.rpc.grpc}">
            <AppenderRef ref="ERROR-APPENDER"/>
            <AppenderRef ref="WARN-APPENDER"/>
            <AppenderRef ref="SPRING-APPENDER"/>
            <AppenderRef ref="STDOUT-APPENDER"/>
        </AsyncLogger>

        <AsyncRoot level="${ctx:logging.level.com.alipay.sofa.rpc.grpc}">
            <AppenderRef ref="APP-DEFAULT-APPENDER"/>
            <AppenderRef ref="WARN-APPENDER"/>
            <AppenderRef ref="ERROR-APPENDER"/>
            <AppenderRef ref="STDOUT-APPENDER"/>
        </AsyncRoot>
    </Loggers>
</Configuration>
spring.application.name=triplebiz
logging.file.path=./samples/dubbo-samples/rpc/dubbo3/logs/
logging.level.com.alipay.sofa.rpc.dubbo3.triplebiz=DEBUG
logging.level.root=INFO
logging.level.com.alipay.sofa.arklet=INFO
#logging.config=classpath:log4j2-spring.xml

dubbo.application.logger=slf4j
dubbo.application.name=triplebiz
dubbo.registry.address=zookeeper://${zookeeper.address:127.0.0.1}:2181
dubbo.protocol.name=tri
dubbo.protocol.port=50051
dubbo.consumer.check=falsepackage com.alipay.sofa.rpc.dubbo3.triplebiz;

import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@EnableDubbo(scanBasePackages=" com.alipay.sofa.rpc.dubbo3.triplebiz.service")
public class TripleBizApplication {
    private static Logger LOGGER = LoggerFactory.getLogger(TripleBizApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(TripleBizApplication.class, args);

        LOGGER.info("TripleBizApplication start!");
        LOGGER.info("Spring Boot Version: " + SpringApplication.class.getPackage().getImplementationVersion());
        LOGGER.info("TripleBizApplication classLoader: " + TripleBizApplication.class.getClassLoader());
    }

}
/*
 * Ant Group
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package com.alipay.sofa.rpc.dubbo3.triplebiz.model;

import java.io.Serializable;

import lombok.Getter;
import lombok.Setter;

/**
 *
 * @author syd
 * @version DemoResponse.java, v 0.1 2023年11月05日 15:17 syd
 */
@Getter
@Setter
public class DemoResponse implements Serializable {
    private static final long serialVersionUID = -6796302417012125318L;
    private String message;
}/*
 * Ant Group
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package com.alipay.sofa.rpc.dubbo3.triplebiz.model;

import java.io.Serializable;

import lombok.Getter;
import lombok.Setter;

/**
 *
 * @author syd
 * @version DemoRequest.java, v 0.1 2023年11月05日 15:17 syd
 */
@Getter
@Setter
public class DemoRequest implements Serializable {
    private static final long serialVersionUID = 3378118426779776009L;
    private String name;
}/*
 * Ant Group
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package com.alipay.sofa.rpc.dubbo3.triplebiz.service;

import com.alipay.sofa.rpc.dubbo3.triplebiz.model.DemoRequest;
import com.alipay.sofa.rpc.dubbo3.triplebiz.model.DemoResponse;
import org.apache.dubbo.config.annotation.DubboService;

/**
 *
 * @author syd
 * @version FastJson2DemoService.java, v 0.1 2023年11月08日 12:52 syd
 */
@DubboService(group = "fastjson2")
public class FastJson2DemoService implements DemoService {
    @Override
    public DemoResponse sayHello(DemoRequest request) {
        DemoResponse response = new DemoResponse();
        response.setMessage(FastJson2DemoService.class.getName() + ": Hello," + request.getName());
        return response;
    }
}/*
 * Ant Group
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package com.alipay.sofa.rpc.dubbo3.triplebiz.service;

import com.alipay.sofa.rpc.dubbo3.triplebiz.model.DemoRequest;
import com.alipay.sofa.rpc.dubbo3.triplebiz.model.DemoResponse;
import org.apache.dubbo.config.annotation.DubboService;

/**
 *
 * @author syd
 * @version DemoServiceImpl.java, v 0.1 2023年11月05日 15:21 syd
 */
@DubboService(group = "triplebiz")
public class DemoServiceImpl implements DemoService {
    @Override
    public DemoResponse sayHello(DemoRequest request) {
        DemoResponse response = new DemoResponse();
        response.setMessage(DemoServiceImpl.class.getName() + ": Hello," + request.getName());
        return response;
    }
}/*
 * Ant Group
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package com.alipay.sofa.rpc.dubbo3.triplebiz.service;

import com.alipay.sofa.rpc.dubbo3.triplebiz.model.DemoRequest;
import com.alipay.sofa.rpc.dubbo3.triplebiz.model.DemoResponse;

/**
 *
 * @author syd
 * @version DemoService.java, v 0.1 2023年11月05日 15:17 syd
 */
public interface DemoService {

    DemoResponse sayHello(DemoRequest request);
}/*
 * Ant Group
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package com.alipay.sofa.rpc.dubbo3.triplebiz.service;

import com.alipay.sofa.rpc.dubbo3.model.CommonRequest;
import com.alipay.sofa.rpc.dubbo3.model.CommonResponse;
import com.alipay.sofa.rpc.dubbo3.model.CommonService;
import org.apache.dubbo.config.annotation.DubboService;

/**
 *  jvm服务，可以被基座调用
 * @author syd
 * @version TripleBizCommonService.java, v 0.1 2023年11月05日 16:02 syd
 */
@DubboService(group = "triplebiz")
public class TripleBizCommonService implements CommonService {
    @Override
    public CommonResponse sayHello(CommonRequest request) {
        CommonResponse response = new CommonResponse();
        response.setMessage(TripleBizCommonService.class.getName() + ": Hello," + request.getName());
        return response;
    }
}package com.alipay.sofa.rpc.dubbo3.triplebiz.rest;

import com.alipay.sofa.rpc.dubbo3.model.CommonRequest;
import com.alipay.sofa.rpc.dubbo3.model.CommonResponse;
import com.alipay.sofa.rpc.dubbo3.model.CommonService;
import com.alipay.sofa.rpc.dubbo3.triplebiz.model.DemoRequest;
import com.alipay.sofa.rpc.dubbo3.triplebiz.model.DemoResponse;
import com.alipay.sofa.rpc.dubbo3.triplebiz.service.DemoService;
import lombok.extern.slf4j.Slf4j;
import org.apache.dubbo.config.annotation.DubboReference;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
public class RPCController {

    /**
     * tri协议，远程调用，默认走hessian序列化
     */
    @DubboReference(group = "triplebiz", scope = "remote")
    private DemoService demoService;

    /**
     * tri协议，injvm调用，scope默认走injvm
     */
    @DubboReference(group = "base")
    private CommonService commonServiceInJvm;

    @Autowired
    private ApplicationContext applicationContext;

    @RequestMapping(value = "/remote", method = RequestMethod.GET)
    public String remote() {
        try {
            String appName = applicationContext.getId();
            DemoRequest demoRequest = new DemoRequest();
            demoRequest.setName(appName);
            DemoResponse response = demoService.sayHello(demoRequest);
            log.info(response.getMessage());
            return response.getMessage();
        } catch (Exception e) {
            return e.getMessage();
        }
    }

    @RequestMapping(value = "/injvm", method = RequestMethod.GET)
    public String injvm() {
        try {
            String appName = applicationContext.getId();
            CommonRequest demoRequest = new CommonRequest();
            demoRequest.setName(appName);
            CommonResponse response = commonServiceInJvm.sayHello(demoRequest);
            log.info(response.getMessage());
            return response.getMessage();
        } catch (Exception e){
            return e.getMessage();
        }
    }
}
